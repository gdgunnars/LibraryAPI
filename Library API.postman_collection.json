{
	"info": {
		"name": "Library API",
		"_postman_id": "0233444a-0666-74cf-7cb2-decd6990a50c",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "GET /users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body has json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:5000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.response.to.not.be.withBody;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users Invalid Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 412 Precondition Failed\", function () {",
									"    pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Response body states that modelstate is not valid\", function () {",
									"    pm.response.to.have.body(\"Modelstate is not valid\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users Successful POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body should be json\", function () {",
									"    pm.response.to.be.json;",
									"    pm.globals.set(\"new_guy_id\", pm.response.json().id);",
									"});",
									"",
									"pm.test(\"Name is New Guy\", function () {",
									"    pm.expect(pm.response.json().name).to.equal(\"New Guy\");",
									"});",
									"",
									"pm.test(\"Location header should be set\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Location\")).to.equal(\"http://localhost:5000/users/\" + pm.globals.get(\"new_guy_id\"));",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Guy\",\n    \"address\": \"Some street\",\n    \"email\": \"email@email.com\",\n    \"phoneNumber\": \"1234567\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users"
							]
						},
						"description": "Posting a valid user should be successful"
					},
					"response": []
				},
				{
					"name": "POST /users Conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 409 Conflict\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response body states that there was a conflict\", function () {",
									"    pm.response.to.have.body(\"The request could not be completed due to a conflict with the current state of the resource.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Guy\",\n    \"address\": \"Some street\",\n    \"email\": \"email@email.com\",\n    \"phoneNumber\": \"1234567\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users"
							]
						},
						"description": "Posting a user with a conflicting email"
					},
					"response": []
				},
				{
					"name": "GET /users/:id Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body should have correct error\", function () {",
									"    pm.response.to.have.body(\"User with id -1 does not exist\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:5000/users/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/:id Valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body should be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Name is New Guy\", function () {",
									"    pm.expect(pm.response.json().name).to.equal(\"New Guy\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:5000/users/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{new_guy_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /users/:id Invalid id with correct body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body should have correct error\", function () {",
									"    pm.response.to.have.body(\"User with id -1 does not exist\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"new\",\n    \"address\": \"new\",\n    \"email\": \"new@new.com\",\n    \"phoneNumber\": \"1234567\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /users/:id Empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.response.to.not.be.withBody;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /users/:id Invalid modelstate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 412 Precondition Failed\", function () {",
									"    pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Response body states that modelstate is not valid\", function () {",
									"    pm.response.to.have.body(\"Modelstate is not valid\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /users/:id Successful PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 204 Created\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Guy\",\n    \"address\": \"New Street\",\n    \"email\": \"email@email.com\",\n    \"phoneNumber\": \"1234567\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{new_guy_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /users/:id Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body should have correct error\", function () {",
									"    pm.response.to.have.body(\"User with id -1 does not exist\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": "Deleting a valid user should be successful"
					},
					"response": []
				},
				{
					"name": "DELETE /users/:id Successfully remove user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body should be empty\", function () {",
									"    pm.response.to.not.be.withBody;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{new_guy_id}}"
								}
							]
						},
						"description": "Deleting a valid user should be successful"
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"description": "",
			"item": [
				{
					"name": "GET /books",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body has json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:5000/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /books with query loanDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body has json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:5000/books?loanDate=2017-08-16",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "loanDate",
									"value": "2017-08-16",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /books with invalid query loanDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body should have correct error\", function () {",
									"    pm.response.to.have.body(\"loanDate not formatted correctly\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:5000/books?loanDate=helloworld",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "loanDate",
									"value": "helloworld",
									"equals": true
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /books with empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.response.to.not.be.withBody;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /books with invalid body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 412 Precondition Failed\", function () {",
									"    pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Response body states that modelstate is not valid\", function () {",
									"    pm.response.to.have.body(\"modelstate is not valid\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /books Successful POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body should be json\", function () {",
									"    pm.response.to.be.json;",
									"    pm.globals.set(\"new_book_id\", pm.response.json().id);",
									"});",
									"",
									"pm.test(\"Title is The Fellowship of the Ring\", function () {",
									"    pm.expect(pm.response.json().title).to.equal(\"The Fellowship of the Ring\");",
									"});",
									"",
									"pm.test(\"Location header should be set\", function () {",
									"    pm.expect(postman.getResponseHeader(\"Location\")).to.equal(\"http://localhost:5000/books/\" + pm.globals.get(\"new_book_id\"));",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Fellowship of the Ring\",\n    \"author\": \"J.R.R. Tolkien\",\n    \"releaseDate\": \"2009-04-03T00:00:00\",\n    \"isbn\": \"1234567890\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /books Conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 409 Conflict\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response body states that there was a conflict\", function () {",
									"    pm.response.to.have.body(\"The request could not be completed due to a conflict with the current state of the resource.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Fellowship of the Ring\",\n    \"author\": \"J.R.R. Tolkien\",\n    \"releaseDate\": \"2009-04-03T00:00:00\",\n    \"isbn\": \"1234567890\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /books/:id Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body should have correct error\", function () {",
									"    pm.response.to.have.body(\"Book with id: -1 not found.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/books/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /books/:id Valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body should be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Title is The Fellowship of the Ring\", function () {",
									"    pm.expect(pm.response.json().title).to.equal(\"The Fellowship of the Ring\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/books/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{new_book_id}}"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /books/:id Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body should have correct error\", function () {",
									"    pm.response.to.have.body(\"Book with id -1 not found.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Fellowship of the Ring\",\n    \"author\": \"J.R.R. Tolkien\",\n    \"releaseDate\": \"2009-04-03T00:00:00\",\n    \"isbn\": \"1234567890\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /books/:id Empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.response.to.not.be.withBody;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/books/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /books/:id Invalid modelstate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 412 Precondition Failed\", function () {",
									"    pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Response body states that modelstate is not valid\", function () {",
									"    pm.response.to.have.body(\"modelstate is not valid\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /books/:id Successful PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 204 Created\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"The Fellowship of the Ring\",\n    \"author\": \"J.R.R. Tolkien\",\n    \"releaseDate\": \"2009-04-03T00:00:00\",\n    \"isbn\": \"987\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{new_book_id}}"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/:id/books Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body should have correct error\", function () {",
									"    pm.response.to.have.body(\"User with id -1 not found.\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:id/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id",
								"books"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/:id/books Valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body should be json\", function () {",
									"    pm.response.to.be.json;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:id/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id",
								"books"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users/:userId/books/:bookId Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/books/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-1"
								},
								{
									"key": "bookId",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users/:userId/books/:bookId Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/books/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "bookId",
									"value": "{{new_book_id}}"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /users/:userId/books/:bookId Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/books/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "bookId",
									"value": "{{new_book_id}}"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /users/:userId/books/:bookId Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"0\",\n\t\"bookId\": \"0\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/books/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-1"
								},
								{
									"key": "bookId",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /users/:userId/books/:bookId No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/books/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "bookId",
									"value": "{{new_book_id}}"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE /users/:userId/books/:bookId Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/books/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-1"
								},
								{
									"key": "bookId",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE /users/:userId/books/:bookId No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body should be empty\", function () {",
									"    pm.response.to.not.be.withBody;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/books/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "bookId",
									"value": "{{new_book_id}}"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE /books/:id Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body should have correct error\", function () {",
									"    pm.response.to.have.body(\"Book with id: -1 not found.\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/books/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE /books/:id Successfully remove book",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body should be empty\", function () {",
									"    pm.response.to.not.be.withBody;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/books/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{new_book_id}}"
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"description": "",
			"item": [
				{
					"name": "GET /books/reviews 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/reviews",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								"reviews"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /books/:id/reviews Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:id/reviews",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id",
								"reviews"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /books/:id/reviews 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:id/reviews",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id",
								"reviews"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/:id/reviews Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:id/reviews",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id",
								"reviews"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/:id/reviews 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:id/reviews",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":id",
								"reviews"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /books/:bookId/reviews/:userId modelstate invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 412\", function () {",
									"    pm.response.to.have.status(412);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/users/:userID/reviews/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userID",
								"reviews",
								":bookId"
							],
							"variable": [
								{
									"key": "userID",
									"value": "-1"
								},
								{
									"key": "bookId",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /books/:bookId/reviews/:userId invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"reviewText\": \"cool\",\n\t\"stars\": \"5\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/reviews/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"reviews",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-1"
								},
								{
									"key": "bookId",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /books/:bookId/reviews/:userId Successful Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"reviewText\": \"cool\",\n\t\"stars\": \"5\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:userId/reviews/:bookId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":userId",
								"reviews",
								":bookId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "bookId",
									"value": "1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /books/:bookId/reviews/:userId Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:bookId/reviews/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":bookId",
								"reviews",
								":userId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "-1"
								},
								{
									"key": "userId",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /books/:bookId/reviews/:userId 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:bookId/reviews/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":bookId",
								"reviews",
								":userId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /books/:bookId/reviews/:userId Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"reviewText\": \"very good\",\n\t\"stars\": \"4\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:bookId/reviews/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":bookId",
								"reviews",
								":userId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "-1"
								},
								{
									"key": "userId",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /books/:bookId/reviews/:userId No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"reviewText\": \"very good\",\n\t\"stars\": \"4\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:bookId/reviews/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":bookId",
								"reviews",
								":userId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE /books/:bookId/reviews/:userId Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:bookId/reviews/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":bookId",
								"reviews",
								":userId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "-1"
								},
								{
									"key": "userId",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE /books/:bookId/reviews/:userId No Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/books/:bookId/reviews/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"books",
								":bookId",
								"reviews",
								":userId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Recommendations",
			"description": "",
			"item": [
				{
					"name": "GET /users/:id/recommendation Invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:id/recommendation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id",
								"recommendation"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/:id/recommendation 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"userId\": \"1\",\n\t\"bookId\": \"{{new_book_id}}\",\n\t\"loanDate\": \"2017-12-12\",\n\t\"hasBeenReturned\": \"false\",\n\t\"endDate\": \"2018-12-12\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/users/:id/recommendation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								":id",
								"recommendation"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}